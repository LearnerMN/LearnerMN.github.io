{
  "name": "Рекурент харьцаа ба матриц",
  "tagline": "Алгоритм, Математик, Программ",
  "body": "#Рекурент харьцаа ба матриц\r\n\r\nРекурент харьцаагаар өгөгдсөн шугаман тэгшитгэлийг/ `F(n) = A*F(n-1) + B*F(n-2)` / бид нар бодохдоо динамик програмчлалын арга ашиглаж боддог. \r\n```C++\r\nint F(int A,int B, int N){\r\n    vector< int > F[N+1];\r\n    F[1] = 1;\r\n    F[2] = 2;\r\n    for (int i=3; i<=N;){\r\n        F[i] = A*F[i-1] + B*F[i-2];\r\n    }\r\n    return F[N];\r\n}\r\n```\r\nЭнэ нь `N`-р гишүүнийг олоход `O(N)` хугацаа зарцуулдаг. Гэвч зарим тохиолдолд бид `LogN`-р бодох шаардлага гарч ирдэг.\r\n\r\nБид нар шугаман рекурент тэгшитгэлийг Xi+1 = M Xi хэлбэртэй бичиж болно. Үүнд:\r\n\r\n### Матриц үүсгэх\r\n<img src=\"http://i.imgur.com/iQ802FF.png\"/>\r\n\r\n### Анализ\r\n\r\n<center>\r\nДараах рекурентийн хувьд авч үзье: f(n) = f(n-1) + f(n-2).\r\n\r\nM x |  f(n)  | = | f(n+1) |\r\n    | f(n-1) |   |  f(n)  |\r\n\r\nТэгшитгэлийн 2 талыг `M`-р үржье\r\n\r\nM x M x |  f(n)  | = M x | f(n+1) | = | f(n+2) |\r\n        | f(n-1) |       |  f(n)  |   | f(n+1) |\r\n\r\nЭмхэтгэвэл:\r\n\r\nM^2 x |  f(n)  | = | f(n+2) |\r\n      | f(n-1) |   | f(n+1) |\r\n\r\nДараах байдалтай болох нь харагдаж байна.\r\n\r\nM^3 x |  f(n)  | = | f(n+3) |\r\n      | f(n-1) |   | f(n+2) |\r\n\r\nM^4 x |  f(n)  | = | f(n+4) |\r\n      | f(n-1) |   | f(n+3) |\r\n\r\n...............................\r\n...............................\r\n...............................\r\n\r\nM^k x |  f(n)  | = | f(n+k) |\r\n      | f(n-1) |   |f(n+k-1)|\r\n</center>\r\n\r\n### Матрицын C++ хэл дээрх код\r\n```C++\r\n#include <vector>\r\n#include <iostream>\r\n\r\nint MOD = 1000000007;\r\nusing namespace std;\r\n// Matrix class\r\nclass Matrix{\r\n    public:\r\n        int N; // Matrix size\r\n        vector< vector< long long > > data; // matrix values\r\n\r\n        Matrix(int N); // constructor resize N matrix\r\n        Matrix(const Matrix &matrix); // constructor assign matrix values\r\n\r\n        const Matrix &operator=(const Matrix &A); // assign operator\r\n        const Matrix operator*(const Matrix &A); // product operator\r\n        const Matrix operator^(int P ); // pow operator\r\n\r\n        ~Matrix(); \r\n};\r\n\r\nMatrix::Matrix(int N){\r\n    this->N = N;\r\n    data = vector< vector< long long > >(N, vector< long long >(N));\r\n}\r\n\r\nMatrix::Matrix(const Matrix &A){\r\n    this->N = A.N;\r\n    data = vector< vector< long long > >(A.data);\r\n}\r\nMatrix::~Matrix(){\r\n    data.clear();\r\n}\r\n\r\nconst Matrix &Matrix::operator=(const Matrix &A){\r\n    if( &A != this ){\r\n        data.clear();\r\n        N = A.N;\r\n        data = vector< vector< long long > >(A.data);\r\n    }\r\n    return *this;\r\n}\r\nconst Matrix Matrix::operator*(const Matrix &A){\r\n    Matrix C(A.N);\r\n    for( int i = 0; i < A.N; ++i )\r\n        for( int j = 0; j < A.N; ++j ){\r\n            for( int k = 0; k < A.N; ++k )\r\n                C.data[i][j] = (C.data[i][j] + data[i][k] * A.data[k][j])%MOD;\r\n        }\r\n    return C;\r\n}\r\n\r\nconst Matrix Matrix::operator^(int P){\r\n    if(P == 1) return (*this);\r\n    if(P & 1) return ((*this) * ((*this) ^ (P-1)));\r\n    Matrix B = ((*this) ^ (P/2));\r\n    return (B*B);\r\n}\r\n\r\nlong long value(Matrix &matrix,int P,vector< int > &def){\r\n    if (P <= def.size())\r\n        return def[P-1];\r\n    Matrix res = matrix^(P-def.size());\r\n    return ((res.data[0][0] * def[1])%MOD + (res.data[0][1] * def[0])%MOD)%MOD;\r\n}\r\n\r\n// main\r\nint main(){\r\n\r\n    vector< int > def = {4,14};\r\n\r\n    Matrix matrix(2);\r\n    matrix.data[0][0] = 3; matrix.data[0][1] = 2;\r\n    matrix.data[1][0] = 1; matrix.data[1][1] = 0;\r\n\r\n    int t;\r\n    cin>>t;\r\n    while (t--){\r\n        int n;\r\n        cin>>n;\r\n        cout<<value(matrix,n,def)<<endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n### Бие дааж бодох бодлогууд\r\n1. <a href=\"http://www.spoj.com/CSMS/problems/MSR10_04/\"> Үг </a><br>\r\n2. <a href=\"http://www.spoj.com/CSMS/problems/TSEREG/\"> Цэрэг </a><br>\r\n3. <a href=\"https://uva.onlinejudge.org/external/108/p10870.pdf\"> UVa 10870 : Recurrences </a><br>\r\n4. <a href=\"https://uva.onlinejudge.org/external/115/p11551.pdf\"> UVa 11551 : Experienced Endeavour </a><br>\r\n5. <a href=\"http://www.spoj.com/CSMS/problems/NEIGH/\"> Хөршүүд </a>",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}